import Head from "next/head"
import Image from "next/image"
import { GetServerSideProps, NextPage } from "next"
import { fetchArticles, fetchCategories } from "@/http"
import { AxiosResponse } from "axios"
import {
  IArticle,
  ICategory,
  ICollectionResponse,
  IPagination,
  IQueryOptions
} from "@/types"
import Tabs from "@/components/Tabs"
import ArticleList from "@/components/ArticleList"
import Pagination from "@/components/Pagination"
import qs from "qs"
import { useRouter } from "next/router"
import { debounce } from "@/utils"

interface IPropTypes {
  categories: {
    items: ICategory[]
  }
  articles: {
    items: IArticle[]
    pagination: IPagination
  }
}

const Home: NextPage<IPropTypes> = ({ categories, articles }) => {
  const { page, pageCount } = articles.pagination
  const router = useRouter()

  const handleOnSearch = (query: string) => {
    router.push(`/?search=${query}`)
  }

  return (
    <>
      <Head>
        <title>G.S.Labs-Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Tabs
        categories={categories.items}
        handleOnSearch={debounce(handleOnSearch, 500)}
      />
      {/* Articles */}
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </>
  )
}
export default Home

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options: Partial<IQueryOptions> = {
    populate: ["createdBy"],
    sort: ["id:desc"],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1
    }
  }

  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search
      }
    }
  }

  const queryString = qs.stringify(options)
  // fetch articles
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString)

  // fetch categories & return in props
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories()
  return {
    props: {
      categories: {
        items: categories.data
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      }
    }
  }
}
